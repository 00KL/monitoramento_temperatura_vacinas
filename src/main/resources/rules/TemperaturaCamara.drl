package com.ufes.sistema_baseados_em_regras.trabalho1

//list any import classes here.
import com.ufes.sistema_baseados_em_regras.entidades.Camara;
import com.ufes.sistema_baseados_em_regras.entidades.TipoVacina;
import com.ufes.sistema_baseados_em_regras.entidades.LoteVacina;
import com.ufes.sistema_baseados_em_regras.entidades.TipoIrregularidade;
import com.ufes.sistema_baseados_em_regras.entidades.RegistroIrregularidadeTemp;
import com.ufes.sistema_baseados_em_regras.entidades.Gestor;
import com.ufes.sistema_baseados_em_regras.entidades.eventos.RegistroTemperatura;
import com.ufes.sistema_baseados_em_regras.entidades.eventos.RegUrgencia;
import com.ufes.sistema_baseados_em_regras.entidades.eventos.RegTempPerigo;
import com.ufes.sistema_baseados_em_regras.entidades.eventos.RegDefeito;

import java.time.LocalDateTime;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

//--------- Queries utilizadas pelos recursos do serviço ----------------
query "retornaRegistrosTemperatura" (String id)
	reg: RegistroTemperatura (num: numCamara == id) over window:time( 10s )
end

query "alertaUrgente"
	reg: RegUrgencia (finalizado: finalizado == false) over window:time( 20s )
end

query "alertaUrgenteFinalizado"
	reg: RegUrgencia (finalizado: finalizado == true) over window:time( 20s )
end

query "alertaDescarte"
	reg: RegUrgencia (descartado: descartado == true) over window:time( 20s )
end

query "alertaDefeito"
	reg: RegDefeito ()
end

query "perigosTemperatura"
	reg: RegTempPerigo ()
end 

//--------- Regras ----------------

rule "Registro de nova temperatura"
	when
		camara: Camara($num: num, $temp: tempAtual)
	then
		insert(new RegistroTemperatura($num, $temp));
end

rule "Checando se temperatura esta proxima ao limite minimo de um lote"
	when
		$camara: Camara($num: num, $temp: tempAtual)
		$lote: LoteVacina($serial: numeroSerial, $perigo: perigoTemperatura == false) from $camara.getLotesvacina
		$tipo: TipoVacina($tempMin: tempMin > ($temp - 1), $nome: nome) from $lote.getTipoVacina
	then
		System.out.println("CAMARA: " + $num + " -> " + "ATENCAO! Temperatura muito baixa para o lote " + $serial + " de vacina do tipo " + $nome + "!");
		insertLogical(new RegTempPerigo($temp, $camara, $lote));
end

rule "Checando se temperatura esta proxima ao limite maximo de um lote"
	when
		$camara: Camara($num: num, $temp: tempAtual)
		$lote: LoteVacina($serial: numeroSerial, perigo: perigoTemperatura == false) from $camara.getLotesvacina
		$tipo: TipoVacina($tempMax: tempMax < ($temp + 1), $nome: nome) from $lote.getTipoVacina
	then
		System.out.println("CAMARA: " + $num + " -> " + "ATENCAO! Temperatura muito alta para o lote " + $serial + " de vacina do tipo " + $nome + "!");
		insertLogical(new RegTempPerigo($temp, $camara, $lote));
end

rule "Checando se temperatura esta acima da temperatura maxima para dado tipo de vacina"
	when
		$camara: Camara($num: num, $temp: tempAtual)
		$lote: LoteVacina($serial: numeroSerial, $perigo: perigoTemperatura == false) from $camara.getLotesvacina
		$tipo: TipoVacina($tempMax: tempMax < $temp, $nome: nome) from $lote.getTipoVacina
	then
		String msg = "CAMARA: " + $num + " -> " + "URGENTE!!! Temperatura acima do limite para o lote " + $serial + " de vacina do tipo " + $nome + ". Diminua a temperatura para abaixo de " + $tempMax + " �C";
		Gestor proximo = $camara.gestorProximo();
		proximo.sendMessage(msg);
		RegistroIrregularidadeTemp reg = new RegistroIrregularidadeTemp($camara, $lote, TipoIrregularidade.Acima_da_Temperatura);
		$lote.setPerigoTemperatura(true);
		$camara.registrarIrregularidade(reg);
		insert(new RegUrgencia(reg, proximo));
end

rule "Checando se temperatura esta abaixo da temperatura minima para dado tipo de vacina"
	when
		$camara: Camara($num: num, $temp: tempAtual)
		$lote: LoteVacina($serial: numeroSerial, $perigo: perigoTemperatura == false) from $camara.getLotesvacina
		$tipo: TipoVacina($tempMin: tempMin > $temp, $nome: nome) from $lote.getTipoVacina
	then
		String msg = "CAMARA: " + $num + " -> " + "URGENTE!!! Temperatura abaixo do limite para o lote " + $serial + " de vacina do tipo " + $nome + ". Aumente a temperatura para acima de " + $tempMin + " �C";
		Gestor proximo = $camara.gestorProximo();
		proximo.sendMessage(msg);
		RegistroIrregularidadeTemp reg = new RegistroIrregularidadeTemp($camara, $lote, TipoIrregularidade.Abaixo_da_Temperatura);
		$lote.setPerigoTemperatura(true);
		$camara.registrarIrregularidade(reg);
		insert(new RegUrgencia(reg, proximo));
end

rule "Checando se uma irregularidade de temperatura baixa foi resolvida"
	when
		$camara: Camara($num: num, $temp: tempAtual)
		$lote: LoteVacina($serial: numeroSerial, $perigo: perigoTemperatura == true) from $camara.getLotesvacina
		$reg: RegistroIrregularidadeTemp($inicio: horaInicio, loteReg: lote == $lote, tipoIrreg: tipoIrregularidade == TipoIrregularidade.Abaixo_da_Temperatura) from $camara.getRegIrregularidade
		$urg: RegUrgencia(reg: reg == $reg, finalizado: finalizado == false)
		$tipo: TipoVacina($nome: nome, $tempMin: tempMin <= $temp) from $lote.getTipoVacina
	then
		System.out.println("CAMARA: " + $num + " -> " + "UFA! O lote " + $serial + " de vacina do tipo " + $nome + " est� a salvo! A temperatura da camara subiu para " + $temp + " �C");
		$camara.removerIrregularidade($reg);
		$lote.setPerigoTemperatura(false);
		$reg.setHoraTermino($camara.getAgora());
		$urg.setFinalizado(true);
		update($camara);
		update($urg);
end

rule "Checando se uma irregularidade de temperatura alta foi resolvida"
	when
		$camara: Camara($num: num, $temp: tempAtual)
		$lote: LoteVacina($serial: numeroSerial, $perigo: perigoTemperatura == true) from $camara.getLotesvacina
		$reg: RegistroIrregularidadeTemp($inicio: horaInicio, loteReg: lote == $lote, tipoIrreg: tipoIrregularidade == TipoIrregularidade.Acima_da_Temperatura) from $camara.getRegIrregularidade
		$urg: RegUrgencia(reg: reg == $reg, finalizado: finalizado == false)
		$tipo: TipoVacina($nome: nome, $tempMax: tempMax >= $temp) from $lote.getTipoVacina
	then
		System.out.println("CAMARA: " + $num + " -> " + "UFA! O lote " + $serial + " de vacina do tipo " + $nome + " est� a salvo! A temperatura da camara diminuiu para " + $temp + " �C");
		$camara.removerIrregularidade($reg);
		$lote.setPerigoTemperatura(false);
		$reg.setHoraTermino($camara.getAgora());
		$urg.setFinalizado(true);
		update($camara);
		update($urg);
end

/*
rule "Checando se um dado lote de vacina venceu"
	when
		$camara: Camara($num: num, $lotes: lotesvacina)
		$hoje: LocalDateTime() from $camara.getAgora
		$lote: LoteVacina($serial: numeroSerial, $validade: dataValidade < $hoje) from $camara.getLotesvacina
		$tipo: TipoVacina($tempMin: tempMin, $nome: nome) from $lote.getTipoVacina
		
	then
		$camara.extrairLote($lote);
		System.out.println("CAMARA: " + $num + " -> " + "DESCARTE! Lote " + $serial + " de vacina do tipo " + $nome + " venceu no dia: " + $validade + ". O descarte e recomendado.");
end
*/

rule "Checar se a irregularidade nao foi resolvida a tempo (temp acima da maxima)"
	when
		$camara: Camara($num: num, $temp: tempAtual, $lotes: lotesvacina)
		$reg: RegistroIrregularidadeTemp($inicio: horaInicio, tipoIrreg: tipoIrregularidade == TipoIrregularidade.Acima_da_Temperatura) from $camara.getRegIrregularidade
		$lote: LoteVacina($serial: numeroSerial) from $reg.getLote
		$hoje: LocalDateTime() from $camara.getAgora
		$urg: RegUrgencia(reg: reg == $reg, finalizado: finalizado == false)
		$tipo: TipoVacina($nome: nome, $tempoMaxAcimaTempIdeal: tempoMaxAcimaTempIdeal < $reg.diferencaEmSegundos($inicio, $hoje)) from $lote.getTipoVacina
	then
		System.out.println("CAMARA: " + $num + " -> " + "DESCARTE! O lote " + $serial + " de vacina do tipo " + $nome + " passou mais de " + $tempoMaxAcimaTempIdeal/60 + " minutos em temperatura acima da indicada e deve ser descartado.");
		$camara.extrairLote($lote);
		$camara.removerIrregularidade($reg);
		$urg.setDescartado();
		update($urg);
end

rule "Checar se a irregularidade nao foi resolvida a tempo (temp abaixo da maxima)"
	when
		$camara: Camara($num: num, $temp: tempAtual)
		$reg: RegistroIrregularidadeTemp($inicio: horaInicio, tipoIrreg: tipoIrregularidade == TipoIrregularidade.Abaixo_da_Temperatura) from $camara.getRegIrregularidade
		$lote: LoteVacina($serial: numeroSerial) from $reg.getLote
		$agora: LocalDateTime() from $camara.getAgora
		$urg: RegUrgencia(reg: reg == $reg, finalizado: finalizado == false)
		$tipo: TipoVacina($nome: nome, $tempoMaxAbaixoTempIdeal: tempoMaxAbaixoTempIdeal < $reg.diferencaEmSegundos($inicio, $agora)) from $lote.getTipoVacina
	then
		System.out.println("CAMARA: " + $num + " -> " + "DESCARTE! O lote " + $serial + " de vacina do tipo " + $nome + " passou mais de " + $tempoMaxAbaixoTempIdeal/60 + " minutos em temperatura abaixo da indicada e deve ser descartado.");
		$camara.extrairLote($lote);
		$camara.removerIrregularidade($reg);
		$urg.setDescartado();
		update($urg);
end

rule "Checar camara defeituosa"
	when
		$camara: Camara($num: num, d: defeituosa == false)
		$urg : ArrayList( size > 3 ) from collect (
		    RegUrgencia(reg.camara == $camara)
		)
	then
		System.out.println("CAMARA: " + $num + " -> " + "DEFEITO! Mais de 3 urgencias reportadas em menos de 20 segundos");
		$camara.setDefeituosa();
		insert(new RegDefeito($camara));
end
